@using Services
@using System.Threading

<div id=@Settings.Id class="@classes @_showValue" style="display: block;">
    <div class="toast-body">
        <div class="d-flex">
            <div class="me-auto">
                @Settings.Message
            </div>
            <button type="button" class="btn-close" @onclick=Close></button>
        </div>
        @if (hasAction)
        {
            <div class="text-center mt-2 pt-2 border-top">
                <button type="button" class="btn btn-primary btn-sm" @onclick=ActionClick>@Settings.Action</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ToastSettings Settings { get; set; } = null!;
    [Parameter] public EventCallback<(Guid toastId, bool isActionClick)> OnClose { get; set; }
    bool hasAction => !string.IsNullOrWhiteSpace(Settings.Action) && Settings.OnClick != null;
    string classes = "toast align-items-center fade ";
    string _showValue = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        switch (Settings.Level)
        {
            case ToastLevel.Error: classes += "bg-danger"; break;
            case ToastLevel.Info: classes += "bg-info"; break;
            case ToastLevel.Success: classes += "bg-success"; break;
            case ToastLevel.Warning: classes += "bg-warning"; break;
        }
        StateHasChanged();

        await Task.Delay(150);
        _showValue = "show";

        StateHasChanged();

        if (hasAction)
            return;

        await Task.Delay(TimeSpan.FromSeconds(7));

        await Close();
    }
    async Task Close()
    {
        _showValue = string.Empty;
        StateHasChanged();
        await Task.Delay(150);

        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync((Settings.Id, false));
    }
    async Task ActionClick()
    {
        if (OnClose.HasDelegate)
            await OnClose.InvokeAsync((Settings.Id, true));
    }
}